


call plug#begin('~/.vim/plugged')

if has("nvim")
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
  Plug 'lewis6991/gitsigns.nvim'
  Plug 'neovim/nvim-lspconfig'
  Plug 'glepnir/lspsaga.nvim'
  Plug 'hrsh7th/nvim-compe'
endif

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-commentary'
" Plug 'airblade/vim-gitgutter'
" Plug 'tpope/vim-fugitive'
Plug 'sirtaj/vim-openscad'
Plug 'arcticicestudio/nord-vim'
" Plug 'rust-lang/rust.vim'
Plug 'ryanoasis/vim-devicons'

call plug#end()

set nocompatible
syntax on
let $VIMHOME = $HOME."/.vim"

filetype on
filetype plugin on

set completeopt=menuone,noselect

set vb t_vb=

let mapleader=','

""Normal set
set cursorline
set showmode
set history=1000
set undolevels=100
set ruler
set ic
set splitbelow
set splitright
set laststatus=2

set hidden
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes

" Keep 3 lines after/before the cursor
set so=3

" active mouse on terminal
set mouse=a

" Turn off swap files
set noswapfile
set nobackup
set nowb

let g:nord_italic = 1
let g:nord_italic_comments = 1
let g:nord_uniform_diff_background = 1
let g:nord_underline = 1
colorscheme nord
highlight Comment ctermfg=14

" Move codeblocks
vnoremap < <gv
vnoremap > >gv

" codeblocks up/down
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Some useful quickfix shortcuts for quickfix
map <C-n> :cn<CR>
map <C-m> :cp<CR>
nnoremap <leader>a :cclose<CR>

" Better copy&paste
" set clipboard=unnamed
set clipboard=unnamedplus

"Backspace fix in mac
set backspace=start,eol,indent

if has("gui_running")
    imap <C-v> <ESC>"+pa
    nmap <C-v> <ESC>"+pa
    cnoremap <C-v> <ESC>"+pa
endif

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

"Ctrl-P
let g:ctrlp_map = '<c-p>'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_switch_buffer = 'et'  " jump to a file if it's open already
let g:ctrlp_mruf_max=450    " number of recently opened files
let g:ctrlp_max_files=0     " do not limit the number of searchable files
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_match_window = 'bottom,order:btt,max:10,results:10'
let g:ctrlp_buftag_types = {'go' : '--language-force=go --golang-types=ftv'}


if has("patch-7.4.710")
  set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
endif

set colorcolumn=80,120

set expandtab
au BufWinEnter * set autoindent|set ts=2|set sw=2


""Number
set number
map <silent><F2> :set invnumber<CR>

"Shortcuts
noremap % v%
map <Leader>z u<CR>
map <Leader><Leader> $<CR>
""Sort lines
vmap <leader>s :sort u<CR>


autocmd BufRead,BufNewFile *.md setlocal textwidth=80
autocmd BufRead,BufNewFile *.rst setlocal textwidth=80


set guitablabel=%M%t
map <silent><C-m> :tabnext<CR>
map <silent><C-k> :tabnext<CR>
map <silent><C-n> :tabprevious<CR>
map <silent><C-j> :tabprevious<CR>
map <silent><C-t> :tabnew<CR>

let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#virtualenv#enabled = 1

let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'


""Python
""let g:pymode = 1
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'
let g:pymode_folding = 0

""""Golang
"let g:go_auto_sameids = 0
"let g:go_auto_type_info = 0
"let g:go_fmt_command = "goimports"
"let g:go_highlight_functions = 0
"let g:go_highlight_methods = 0
"let g:go_highlight_types = 0
"let g:go_def_mapping_enabled = 1
"let g:go_fmt_fail_silently = 1
"let g:go_term_enabled = 1
"let g:go_autodetect_gopath = 1


""" Rust
let g:rustfmt_autosave = 1


""" Commentary
xmap <Leader>c <Plug>Commentary


" let g:indentLine_color_term = 239

function! SendToJq(jqFilter) range
    let saved_register = @*
    normal! `<v`>y
    new
    normal! P
    let @* = saved_register
    silent exec ':%! jq -r ''' . a:jqFilter . ''''
endfunction

function! CreateTableUsingJQ(jqFilter) range
    silent call SendToJq(a:jqFilter)
    silent exec ':%EasyAlign *\ '
    silent exec ':%s/''//g'
endfunction

vnoremap PS :call SendToJq(".")<CR>

command! -nargs=* -range PodStatus call CreateTableUsingJQ('.items[] | [(.metadata.namespace+":"+.metadata.name), (.spec.containers | length), (.status.podIP), .spec.nodeName] | @sh')<CR>
command! -nargs=* -range JQ call SendToJq('.')


noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" Zoom one pane
nnoremap <leader>z <C-W><C-\|><C-W><C-_>
" Restore panes
nnoremap <leader>= <C-w><C-=>

function! Note()
  :new
  :resize 10
endfunction

nnoremap <leader>x :call Note()<CR>

autocmd Filetype c setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype lua setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

if has("nvim")
  let g:compe = {}
  let g:compe.enabled = v:true
  let g:compe.autocomplete = v:true
  let g:compe.debug = v:false
  let g:compe.min_length = 1
  let g:compe.preselect = 'enable'
  let g:compe.throttle_time = 80
  let g:compe.source_timeout = 200
  let g:compe.resolve_timeout = 800
  let g:compe.incomplete_delay = 400
  let g:compe.max_abbr_width = 100
  let g:compe.max_kind_width = 100
  let g:compe.max_menu_width = 100
  let g:compe.documentation = v:true

  let g:compe.source = {}
  let g:compe.source.path = v:true
  let g:compe.source.buffer = v:true
  let g:compe.source.calc = v:true
  let g:compe.source.nvim_lsp = v:true
  let g:compe.source.nvim_lua = v:true
  let g:compe.source.vsnip = v:true
  let g:compe.source.ultisnips = v:true
  let g:compe.source.luasnip = v:true
  let g:compe.source.emoji = v:true
endif

if has("nvim")
  nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
  nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
  nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
  nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>

lua << EOF

  --[[
  -- Notes:
  --
  -- When updating TreeSitter, you'll want to update the parsers using
  -- :TSUpdate manually. Or, you can call :TSInstall to install new parsers.
  -- Run :checkhealth nvim_treesitter to see what parsers are setup.
  --]]
  ----------
  local nvim_lsp = require('lspconfig')
  -- Use an on_attach function to only map the following keys
  -- after the language server attaches to the current buffer
  local on_attach = function(client, bufnr)
    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

    -- Mappings.
    local opts = { noremap=true, silent=true }

    -- See `:help vim.lsp.*` for documentation on any of the below functions
    buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
    buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', 'K', '<Cmd>lua require(\'lspsaga.hover\').render_hover_doc()<CR>', opts)
    buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    buf_set_keymap('n', 'gs', '<cmd>lua require(\'lspsaga.signaturehelp\').signature_help()<CR>', opts)
    buf_set_keymap('n', 'gr', '<cmd>lua require(\'lspsaga.rename\').rename()<CR>', opts)
    buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
    buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
    buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
    buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
    buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
    buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
    buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
    buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
    buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  end

  -- Use a loop to conveniently call 'setup' on multiple servers and
  -- map buffer local keybindings when the language server attaches
  local servers = { "gopls" }
  for _, lsp in ipairs(servers) do
    nvim_lsp[lsp].setup { on_attach = on_attach }
  end

  ---------------------------------------------------------------------
  -- Treesitter
  ---------------------------------------------------------------------
  require'nvim-treesitter.configs'.setup {
    highlight = {
      enable = true,
    },
  }

  require('gitsigns').setup()
EOF

endif

autocmd BufWritePre *.go lua vim.lsp.buf.code_action()
autocmd BufWritePre *.go lua vim.lsp.buf.formatting_sync(nil, 1000)
